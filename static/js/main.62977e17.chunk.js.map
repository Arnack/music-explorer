{"version":3,"sources":["services/api/releaseAPI.ts","store/searchStore/searchStore.ts","components/splitList/listItem/ListItem.tsx","components/loader/Loader.tsx","components/splitList/releaseDescription/ReleaseDescription.tsx","components/splitList/SplitList.tsx","components/contentLists/ReleaseList.tsx","components/searchbox/Searchbox.tsx","containers/layout/Layout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ReleaseAPI","getReleaseDescription","releaseId","a","axios","get","getReleases","searchData","release","page","console","log","process","updateSearchText","createEvent","fetchReleasesFx","createEffect","searchStore","createStore","pagination","pages","per_page","items","searchText","results","on","doneData","state","result","data","payload","ListItem","selected","handleSelect","className","onClick","id","src","thumb","alt","title","year","Array","isArray","genre","join","label","loadingIcon","LoadingOutlined","style","fontSize","spin","Loader","indicator","ReleaseDescription","useState","description","setDescription","isLoading","setIsLoading","useEffect","then","catch","err","error","finally","notes","artists","map","artist","name","country","labels","genres","styles","formats","format","videos","video","videoId","URL","uri","searchParams","includes","width","frameBorder","allow","allowFullScreen","SplitList","releases","useStore","paginationInfo","selectedReleaseId","setSelectedReleaseId","current","defaultPageSize","total","hideOnSinglePage","size","responsive","onChange","newPage","showSizeChanger","ReleaseList","pending","length","Searchbox","placeholder","e","target","value","onPressEnter","IndexPage","padding","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62977e17.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst token = process.env.REACT_APP_TOKEN;\n\nexport class ReleaseAPI {\n    static getReleaseDescription = async (releaseId: number | string) => {\n        return await axios\n            .get(`https://api.discogs.com/releases/${releaseId}`)\n    }\n\n    static getReleases = async (searchData: {release: string, page: number | string }) => {\n        const { release, page } = searchData;\n\n        console.log('release', release);\n\n        return await axios\n            .get(`https://api.discogs.com/database/search?token=${token}&page=${page}&per_page=10&type=release&q=${release}`)\n    }\n}","import {useEvent} from \"effector-react\";\nimport {createEffect, createEvent, createStore} from \"effector\";\nimport {ReleaseAPI} from \"../../services/api/releaseAPI\";\n\nexport const updateSearchText = createEvent<string>(\"search text updated\");\nexport const fetchReleasesFx = createEffect(ReleaseAPI.getReleases)\n\nexport const searchStore = createStore({\n    pagination: {\n        page: 1,\n        pages: 0,\n        per_page: 5,\n        items: 0\n    },\n    searchText: \"\",\n    results: []\n})\n    .on(fetchReleasesFx.doneData, (state, result) => {\n        return {...result.data, searchText: \"\"}\n    })\n    .on(updateSearchText, (state, payload) => {\n        return {...state, searchText: payload}\n    })","import React, {FC} from \"react\";\nimport {IRelease} from \"../../../model/release/Release\";\nimport \"./ListItem.scss\";\n\ninterface IProps {\n    release: IRelease;\n    selected?: boolean;\n    handleSelect: (id: number) => void;\n}\n\nexport const ListItem: FC<IProps> = ({ release, selected, handleSelect }) => {\n    return <div className={`list-item ${selected ? 'selected' : ''}`}\n                onClick={() => handleSelect(release.id)}>\n        <div className=\"thumb-container\">\n            <img className=\"release-thumb\" src={release.thumb ? release.thumb : \"\"} alt=\"release thumb\" />\n        </div>\n        <div className=\"content-container\">\n            <div className=\"heading\">\n                <span className=\"title\">\n                    {release.title}\n                </span>\n                <span className=\"year\">\n                    {release.year}\n                </span>\n            </div>\n\n            <div className=\"genres\">\n                {\n                    Array.isArray(release.genre) ? release.genre.join(\", \") : release.genre\n                }\n            </div>\n\n            <div className=\"labels\">\n                {\n                    Array.isArray(release.label) ? release.label.join(\", \") : release.label\n                }\n            </div>\n        </div>\n    </div>\n}","import React, {FC} from \"react\";\nimport {Spin} from \"antd\";\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 40 }} spin />;\n\nexport const Loader: FC = () => {\n    return <div>\n        <Spin indicator={loadingIcon} />\n        <span> Loading...</span>\n    </div>\n}","import React, {FC, useEffect, useState} from \"react\";\nimport {IReleaseDescription} from \"../../../model/release/Release\";\nimport {ReleaseAPI} from \"../../../services/api/releaseAPI\";\nimport \"./ReleaseDescription.scss\";\nimport {Loader} from \"../../loader/Loader\";\n\ninterface IProps {\n    releaseId: number | null;\n}\n\nexport const ReleaseDescription: FC<IProps> = ({releaseId}) => {\n    const [description, setDescription] = useState<IReleaseDescription | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        if (releaseId) {\n            setIsLoading(true);\n            ReleaseAPI.getReleaseDescription(releaseId)\n                .then(result => {\n                    setDescription(result.data)\n                })\n                .catch(err => {\n                    console.error(\"Unable to fetch release description\", err)\n                })\n                .finally(() => {\n                    setIsLoading(false)\n                })\n        }\n    }, [releaseId])\n\n    if (!releaseId) {\n        return <div>\n            <h2>Select an item to see a description</h2>\n            <p>Nothing is selected</p>\n        </div>\n    }\n\n    if (isLoading) {\n        return <Loader/>\n    }\n\n    return <div className={\"release-description-container\"}>\n        <h3>{description?.title}</h3>\n\n        <div className=\"go-back\">\n\n        </div>\n        {description?.notes && <div className=\"notes\">\n            {description?.notes}\n        </div>}\n        <table>\n            <tbody>\n            <tr>\n                <th>Artists:</th>\n                <td>{description?.artists?.map(artist => artist.name).join(\", \")}</td>\n            </tr>\n            <tr>\n                <th>Country:</th>\n                <td>{description?.country}</td>\n            </tr>\n            <tr>\n                <th>Labels:</th>\n                <td>{description?.labels?.map(label => label.name ? label.name : label)\n                    .join(\", \")}</td>\n            </tr>\n            <tr>\n                <th>Genres:</th>\n                <td>{description?.genres?.map(genre => genre.name ? genre.name : genre)\n                    .join(\", \")}</td>\n            </tr>\n            <tr>\n                <th>Styles:</th>\n                <td>{description?.styles?.map(style => style.name ? style.name : style)\n                    .join(\", \")}</td>\n            </tr>\n            <tr>\n                <th>Formats:</th>\n                <td>{description?.formats?.map(format => format.name ? format.name : format)\n                    .join(\", \")}</td>\n            </tr>\n            <tr>\n                <th>Release Date:</th>\n                <td>{description?.year}</td>\n            </tr>\n            </tbody>\n        </table>\n        {\n            description?.videos?.map((video) => {\n\n                const url = new URL(video.uri);\n                const videoId = url.searchParams.get(\"v\");\n\n                if (video.uri.includes('youtube'))\n                    return <iframe width=\"300\" src={`https://www.youtube.com/embed/${videoId}`}\n                                   title={video.title} frameBorder=\"0\"\n                                   allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                                   allowFullScreen/>\n            })\n        }\n    </div>\n}","import React, {useState} from \"react\";\nimport {useStore} from \"effector-react\";\nimport {fetchReleasesFx, searchStore} from \"../../store/searchStore/searchStore\";\nimport './splitList.scss';\nimport {ListItem} from \"./listItem/ListItem\";\nimport {IRelease} from \"../../model/release/Release\";\nimport {ReleaseDescription} from \"./releaseDescription/ReleaseDescription\";\nimport { Pagination } from 'antd';\nimport {IPagination} from \"../../model/pagination/Pagination\";\n\n\nexport const SplitList = () => {\n    const releases: IRelease[] = useStore(searchStore).results;\n    const searchText: string = useStore(searchStore).searchText;\n    const paginationInfo: IPagination = useStore(searchStore).pagination;\n    const [selectedReleaseId, setSelectedReleaseId] = useState<number | null>(null);\n\n    const handlePaginate = (newPage: number) => {\n        console.log('np', newPage)\n        fetchReleasesFx({ release: searchText, page: newPage });\n    }\n\n    return <div className={\"split-list-wrapper\"}>\n        <div className=\"list-container\">\n            {releases.map((release) =>\n                <ListItem release={release}\n                          handleSelect={setSelectedReleaseId}\n                          selected={release.id === selectedReleaseId} />)}\n\n                          <div className=\"pagination-wrapper\">\n                              <Pagination current={paginationInfo.page}\n                                          defaultPageSize={paginationInfo.per_page}\n                                          total={paginationInfo.pages}\n                                          hideOnSinglePage={true}\n                                          size={\"small\"}\n                                          responsive={true}\n                                          onChange={handlePaginate}\n                                          showSizeChanger={false}\n                              />\n                          </div>\n\n        </div>\n\n        <div className=\"item-details\">\n                <ReleaseDescription releaseId={selectedReleaseId} />\n        </div>\n    </div>\n}","import React, {FC} from \"react\";\nimport {useStore} from \"effector-react\";\nimport {fetchReleasesFx, searchStore} from \"../../store/searchStore/searchStore\";\nimport {Searchbox} from \"../searchbox/Searchbox\";\nimport {SplitList} from \"../splitList/SplitList\";\nimport {Loader} from \"../loader/Loader\";\n\ninterface IProps {\n}\n\nexport const ReleaseList: FC<IProps> = ({}) => {\n    const releases = useStore(searchStore).results;\n    const pending = useStore(fetchReleasesFx.pending);\n\n    if (pending) {\n        return <Loader />\n    }\n\n    if (!releases || releases.length === 0) {\n        return <div>\n            <h1>Welcome to music explorer</h1>\n            <p>There is nothing to display now, but you can search for releases</p>\n        </div>\n    }\n\n    return <div>\n        <SplitList />\n    </div>\n}","import React, {useState} from \"react\";\nimport {Input} from \"antd\";\nimport {fetchReleasesFx, searchStore, updateSearchText} from \"../../store/searchStore/searchStore\";\nimport {useStore} from \"effector-react\";\n\nexport const Searchbox = () => {\n    const { searchText } = useStore(searchStore)\n    return <>\n            <Input placeholder=\"Search\"\n                   onChange={(e) => updateSearchText(e.target.value)}\n                   onPressEnter={() => fetchReleasesFx({release: searchText, page: 1})}\n            />\n        </>\n}","import React, {FC, useState} from \"react\";\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport { Input, Space } from 'antd';\nimport { Layout, Breadcrumb } from 'antd';\nimport { Content, Footer, Header } from \"antd/es/layout/layout\";\nimport {ReleaseAPI} from \"../../services/api/releaseAPI\";\nimport {ReleaseList} from \"../../components/contentLists/ReleaseList\";\nimport {Searchbox} from \"../../components/searchbox/Searchbox\";\nexport const IndexPage:FC = () => {\n\n    return <Layout className=\"layout\">\n        <Header>\n            <div className=\"logo\">\n                Explore Music\n            </div>\n            <div className=\"logo searchbox\">\n                <Searchbox />\n            </div>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n            <div className=\"site-layout-content\">\n                <ReleaseList />\n            </div>\n        </Content>\n        {/*<Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>*/}\n    </Layout>\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { IndexPage } from \"./containers/layout/Layout\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IndexPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}